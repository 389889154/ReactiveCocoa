// This is auto-generated by gyb.

import Foundation
import ReactiveSwift
import enum Result.NoError
import AppKit

extension NSLayoutConstraint {

	// constant: CGFloat

	public static func <~ <Source: BindingSourceProtocol>(
		target: NSLayoutConstraint,
		source: Source
	) -> Disposable? where Source.Value == CGFloat, Source.Error == NoError {
		return target.reactive.constant <~ source
	}

}
extension NSControl {

	// stringValue: String

	public static func <~ <Source: BindingSourceProtocol>(
		target: NSControl,
		source: Source
	) -> Disposable? where Source.Value == String, Source.Error == NoError {
		return target.reactive.stringValue <~ source
	}


	// attributedStringValue: NSAttributedString

	public static func <~ <Source: BindingSourceProtocol>(
		target: NSControl,
		source: Source
	) -> Disposable? where Source.Value == NSAttributedString, Source.Error == NoError {
		return target.reactive.attributedStringValue <~ source
	}


	// boolValue: Bool

	public static func <~ <Source: BindingSourceProtocol>(
		target: NSControl,
		source: Source
	) -> Disposable? where Source.Value == Bool, Source.Error == NoError {
		return target.reactive.boolValue <~ source
	}


	// intValue: Int32

	public static func <~ <Source: BindingSourceProtocol>(
		target: NSControl,
		source: Source
	) -> Disposable? where Source.Value == Int32, Source.Error == NoError {
		return target.reactive.intValue <~ source
	}


	// integerValue: Int

	public static func <~ <Source: BindingSourceProtocol>(
		target: NSControl,
		source: Source
	) -> Disposable? where Source.Value == Int, Source.Error == NoError {
		return target.reactive.integerValue <~ source
	}


	// doubleValue: Double

	public static func <~ <Source: BindingSourceProtocol>(
		target: NSControl,
		source: Source
	) -> Disposable? where Source.Value == Double, Source.Error == NoError {
		return target.reactive.doubleValue <~ source
	}

}


extension NSTextField: BindingSourceProtocol {
	public func observe(_ observer: Observer<String, NoError>) -> Disposable? {
		return reactive.stringValues.observe(observer)
	}
}
